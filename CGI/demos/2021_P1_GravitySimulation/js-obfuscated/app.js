const a0_0x3946f4 = a0_0x30c9; (function (_0x12629e, _0x33283c) { const _0x5b70ef = a0_0x30c9, _0x48e490 = _0x12629e(); while (!![]) { try { const _0x229f0b = -parseInt(_0x5b70ef(0x204)) / 0x1 * (parseInt(_0x5b70ef(0x255)) / 0x2) + -parseInt(_0x5b70ef(0x1fe)) / 0x3 * (parseInt(_0x5b70ef(0x223)) / 0x4) + -parseInt(_0x5b70ef(0x215)) / 0x5 * (parseInt(_0x5b70ef(0x24f)) / 0x6) + -parseInt(_0x5b70ef(0x24b)) / 0x7 * (parseInt(_0x5b70ef(0x222)) / 0x8) + parseInt(_0x5b70ef(0x1f2)) / 0x9 * (-parseInt(_0x5b70ef(0x203)) / 0xa) + parseInt(_0x5b70ef(0x242)) / 0xb + parseInt(_0x5b70ef(0x21a)) / 0xc; if (_0x229f0b === _0x33283c) break; else _0x48e490['push'](_0x48e490['shift']()); } catch (_0x5d567f) { _0x48e490['push'](_0x48e490['shift']()); } } }(a0_0x21cd, 0x19fee)); import { buildProgramFromSources, loadShadersFromURLS, setupWebGL } from '../../../libs/utils.js'; import { vec2, flatten, subtract, dot } from '../../../libs/MV.js'; import *as a0_0x52a93d from '../../helpers.js'; const SPACE_WIDTH = 1.5, MAX_BODIES = 0xa; function a0_0x21cd() { const _0x1b41a5 = ['vLife', '1756931EPeCQY', 'uDeltaTime', 'Increase\x20speed', 'endTransformFeedback', 'particle-update.frag', 'max', 'getAttribLocation', 'Close\x20particles\x20source\x20angle', 'innerHeight', '37737dtNhAW', 'Decrease\x20min\x20particle\x20life', 'resize', 'radius', '1083618bdfJXM', 'vAge', 'key', 'random', 'ARRAY_BUFFER', 'blendFunc', '2cIFWCb', 'shiftKey', 'origin', 'vPosition', 'height', 'centerAngle', 'Decrease\x20max\x20particle\x20life', 'log', 'ONE_MINUS_SRC_ALPHA', 'vVelocityOut', 'uniform2f', 'uMaxSpeed', '532305mFPccz', 'Open\x20particles\x20source\x20angle', 'TRANSFORM_FEEDBACK_BUFFER', 'useProgram', 'count', 'uRadius[', 'enableVertexAttribArray', 'maxSpeed', 'viewport', 'FLOAT', 'vertexAttribPointer', 'clear', '620472bCtSOR', 'getUniformLocation', 'deltaAngle', 'push', 'time', '30xdwAkJ', '95711ZiKtmN', 'clearColor', 'bindBufferBase', 'deltaTime', 'Increase\x20min\x20particle\x20life', 'minLife', 'drawArrays', 'maxLife', 'mouseup', 'offsetY', 'uPosition[', 'vPositionOut', 'POINTS', 'position', 'createBuffer', 'Toggle\x20field\x20visualization', 'Shift', '5jzxoSb', 'offsetX', 'uSpaceSize', 'particle-render.frag', 'addEventListener', '9487488sqptXB', 'uniform2fv', 'keydown', 'bufferData', 'vLifeOut', 'enable', 'BLEND', 'vVelocity', '272gGVZRd', '4AbXIUi', 'mousemove', 'STATIC_DRAW', 'uMinLife', 'min', 'uniform1f', 'minSpeed', 'Toggle\x20particle\x20visualization', 'disable', 'length', 'field-render.vert', 'STREAM_DRAW', 'setup_keydown_handlers', 'width', 'uMaxLife', 'vAgeOut', 'COLOR_BUFFER_BIT', 'SRC_ALPHA', 'Increase\x20max\x20particle\x20life', 'field-render.frag', 'requestAnimationFrame', 'bindBuffer', 'Move\x20particle\x20source\x20to\x20mouse\x20position', 'sqrt', 'TRIANGLES', 'particle-render.vert', 'uOrigin', 'mousedown', 'uMinSpeed', 'Rotate\x20source\x20counter\x20clock\x20wise']; a0_0x21cd = function () { return _0x1b41a5; }; return a0_0x21cd(); } let bodies = { 'position': [], 'radius': [] }, inParticlesBuffer, outParticlesBuffer, quadBuffer; const N_PARTICLES = 0xf4240, MIN_LIFE_ABS = 0x1, MAX_LIFE_ABS = 0x14, DELTA_AGE = 0x1; let paramsPS = { 'minLife': 0x2, 'maxLife': 0xa, 'time': undefined, 'origin': [0x0, 0x0], 'minSpeed': 0.1, 'maxSpeed': 0.2, 'centerAngle': 0x0, 'deltaAngle': Math['PI'] }; const STEP_ANGLE = Math['PI'] / 0x6; let bodyCreation = ![], lastPos = vec2(0x0, 0x0), drawPoints = !![], drawField = !![]; function a0_0x30c9(_0x21252d, _0x587e82) { const _0x21cd62 = a0_0x21cd(); return a0_0x30c9 = function (_0x30c93b, _0x3db88d) { _0x30c93b = _0x30c93b - 0x1e7; let _0x21804e = _0x21cd62[_0x30c93b]; return _0x21804e; }, a0_0x30c9(_0x21252d, _0x587e82); } const keydown_handlers = { 'PageUp': { 'handler': increase_speed, 'msg': a0_0x3946f4(0x244) }, 'PageDown': { 'handler': decrease_speed, 'msg': 'Decrease\x20speed' }, 'ArrowUp': { 'handler': open_angle, 'msg': a0_0x3946f4(0x1f3) }, 'ArrowDown': { 'handler': close_angle, 'msg': a0_0x3946f4(0x249) }, 'ArrowLeft': { 'handler': rotate_ccw, 'msg': a0_0x3946f4(0x240) }, 'ArrowRight': { 'handler': rotate_cw, 'msg': 'Rotate\x20source\x20clock\x20wise' }, 'q': { 'handler': increase_min_life, 'msg': a0_0x3946f4(0x208) }, 'a': { 'handler': decrease_min_life, 'msg': a0_0x3946f4(0x24c) }, 'w': { 'handler': increase_max_life, 'msg': a0_0x3946f4(0x235) }, 's': { 'handler': decrease_max_life, 'msg': a0_0x3946f4(0x1ec) }, '0': { 'handler': toggle_draw_field, 'msg': a0_0x3946f4(0x213) }, '9': { 'handler': toggle_draw_points, 'msg': a0_0x3946f4(0x22a) }, 'Shift': { 'handler': move_particle_source, 'msg': a0_0x3946f4(0x239) } }; function increase_speed(_0x1bd93b) { const _0x29f955 = a0_0x3946f4; paramsPS[_0x29f955(0x1f9)] *= 1.2, paramsPS[_0x29f955(0x229)] *= 1.15; } function decrease_speed(_0x1beac9) { const _0x4530cb = a0_0x3946f4; paramsPS[_0x4530cb(0x1f9)] /= 1.2, paramsPS[_0x4530cb(0x229)] /= 1.15; } function open_angle(_0x50ed0a) { const _0x13af2e = a0_0x3946f4; paramsPS[_0x13af2e(0x200)] = Math['min'](paramsPS[_0x13af2e(0x200)] + Math['PI'] / 0x3c, Math['PI']); } function close_angle(_0x2a8eec) { const _0x49863c = a0_0x3946f4; paramsPS[_0x49863c(0x200)] = Math['max'](paramsPS[_0x49863c(0x200)] - Math['PI'] / 0x3c, Math['PI'] / 0x3c); } function rotate_ccw(_0x3ac3cb) { const _0x46151f = a0_0x3946f4; paramsPS[_0x46151f(0x1eb)] += STEP_ANGLE * paramsPS[_0x46151f(0x207)]; } function rotate_cw(_0x41f341) { const _0x11bcac = a0_0x3946f4; paramsPS['centerAngle'] -= STEP_ANGLE * paramsPS[_0x11bcac(0x207)]; } function increase_min_life(_0x263869) { const _0x2f99b2 = a0_0x3946f4; paramsPS['minLife'] = Math[_0x2f99b2(0x227)](paramsPS[_0x2f99b2(0x209)] + DELTA_AGE, paramsPS[_0x2f99b2(0x20b)] - DELTA_AGE); } function decrease_min_life(_0x402c0b) { const _0x4bbd98 = a0_0x3946f4; paramsPS[_0x4bbd98(0x209)] = Math[_0x4bbd98(0x247)](paramsPS['minLife'] - DELTA_AGE, MIN_LIFE_ABS); } function increase_max_life(_0x9d596) { const _0x1d3c55 = a0_0x3946f4; paramsPS[_0x1d3c55(0x20b)] = Math['min'](paramsPS['maxLife'] + DELTA_AGE, MAX_LIFE_ABS); } function decrease_max_life(_0x4c80c3) { const _0x4c999e = a0_0x3946f4; paramsPS[_0x4c999e(0x20b)] = Math[_0x4c999e(0x247)](paramsPS['maxLife'] - DELTA_AGE, paramsPS[_0x4c999e(0x209)] + DELTA_AGE); } function toggle_draw_field(_0x4c63b9) { drawField = !drawField; } function toggle_draw_points(_0x180e09) { drawPoints = !drawPoints; } function move_particle_source(_0x44d205) { const _0x5ac557 = a0_0x3946f4; paramsPS[_0x5ac557(0x1e8)] = lastPos; } function main(_0x297a14) { const _0x461d5e = a0_0x3946f4, _0x4c1436 = document['createElement']('canvas'); document['body']['appendChild'](_0x4c1436), _0x4c1436[_0x461d5e(0x230)] = window['innerWidth'], _0x4c1436[_0x461d5e(0x1ea)] = window[_0x461d5e(0x24a)]; const _0x3fcb56 = setupWebGL(_0x4c1436, { 'alpha': !![] }), _0x2602ea = buildProgramFromSources(_0x3fcb56, _0x297a14[_0x461d5e(0x22d)], _0x297a14['field-render.frag']), _0x2c144b = buildProgramFromSources(_0x3fcb56, _0x297a14[_0x461d5e(0x23c)], _0x297a14[_0x461d5e(0x218)]), _0x5ba759 = buildProgramFromSources(_0x3fcb56, _0x297a14['particle-update.vert'], _0x297a14[_0x461d5e(0x246)], [_0x461d5e(0x20f), _0x461d5e(0x232), _0x461d5e(0x21e), _0x461d5e(0x1ef)]); let _0x34110d = SPACE_WIDTH * _0x4c1436[_0x461d5e(0x1ea)] / _0x4c1436['width']; _0x3fcb56['viewport'](0x0, 0x0, _0x4c1436[_0x461d5e(0x230)], _0x4c1436['height']), _0x3fcb56[_0x461d5e(0x205)](0x0, 0x0, 0x0, 0x1), _0x3fcb56[_0x461d5e(0x21f)](_0x3fcb56[_0x461d5e(0x220)]), _0x3fcb56[_0x461d5e(0x254)](_0x3fcb56[_0x461d5e(0x234)], _0x3fcb56[_0x461d5e(0x1ee)]), _0xc75a6c(), _0x1cc8d5(N_PARTICLES, paramsPS[_0x461d5e(0x209)], paramsPS[_0x461d5e(0x20b)]), window[_0x461d5e(0x219)](_0x461d5e(0x24d), function (_0x2db58b) { const _0x159de2 = _0x461d5e; _0x4c1436[_0x159de2(0x230)] = window['innerWidth'], _0x4c1436['height'] = window[_0x159de2(0x24a)], _0x3fcb56[_0x159de2(0x1fa)](0x0, 0x0, _0x4c1436[_0x159de2(0x230)], _0x4c1436[_0x159de2(0x1ea)]), _0x34110d = SPACE_WIDTH * _0x4c1436[_0x159de2(0x1ea)] / _0x4c1436[_0x159de2(0x230)]; }), a0_0x52a93d[_0x461d5e(0x22f)](window, keydown_handlers), window[_0x461d5e(0x219)](_0x461d5e(0x21c), function (_0x4bd3a7) { const _0x4aff21 = _0x461d5e; console[_0x4aff21(0x1ed)](_0x4bd3a7[_0x4aff21(0x251)]); switch (_0x4bd3a7[_0x4aff21(0x251)]) { case _0x4aff21(0x214): paramsPS[_0x4aff21(0x1e8)] = lastPos; }_0x4eec94(); }), _0x4c1436[_0x461d5e(0x219)](_0x461d5e(0x23e), function (_0x206949) { const _0x56421a = _0x461d5e; bodyCreation = !_0x206949[_0x56421a(0x1e7)] && bodies[_0x56421a(0x211)][_0x56421a(0x22c)] < MAX_BODIES; if (bodyCreation) { const _0x38a95d = _0x22a3f4(_0x4c1436, _0x206949); bodies['position'][_0x56421a(0x201)](_0x38a95d), bodies[_0x56421a(0x24e)]['push'](0x0); } }), _0x4c1436[_0x461d5e(0x219)](_0x461d5e(0x224), function (_0x852304) { const _0x1abaf5 = _0x461d5e, _0x356034 = _0x22a3f4(_0x4c1436, _0x852304); if (bodyCreation) { const _0x1e6ae5 = subtract(_0x356034, bodies['position'][bodies[_0x1abaf5(0x211)][_0x1abaf5(0x22c)] - 0x1]), _0x2f9ba0 = Math[_0x1abaf5(0x23a)](dot(_0x1e6ae5, _0x1e6ae5)); bodies[_0x1abaf5(0x24e)][bodies[_0x1abaf5(0x211)][_0x1abaf5(0x22c)] - 0x1] = _0x2f9ba0; } if (_0x852304[_0x1abaf5(0x1e7)]) paramsPS[_0x1abaf5(0x1e8)] = _0x356034; lastPos = _0x356034; }), _0x4c1436['addEventListener'](_0x461d5e(0x20c), function (_0x4f8318) { const _0x5a01da = _0x461d5e; bodyCreation = ![], bodies[_0x5a01da(0x1f6)]++; }); function _0x22a3f4(_0x52a7ed, _0x5348d9) { const _0x353930 = _0x461d5e, _0x3e376b = _0x5348d9[_0x353930(0x216)], _0x28db7c = _0x5348d9[_0x353930(0x20d)], _0x595ea1 = (_0x3e376b / _0x52a7ed['width'] * 0x2 - 0x1) * SPACE_WIDTH, _0x4bb47b = ((_0x52a7ed[_0x353930(0x1ea)] - _0x28db7c) / _0x52a7ed['height'] * 0x2 - 0x1) * _0x34110d; return vec2(_0x595ea1, _0x4bb47b); } window[_0x461d5e(0x237)](_0xec1b50); function _0xc75a6c() { const _0x303b65 = _0x461d5e, _0x267a84 = [-0x1, 0x1, -0x1, -0x1, 0x1, -0x1, -0x1, 0x1, 0x1, -0x1, 0x1, 0x1]; quadBuffer = _0x3fcb56[_0x303b65(0x212)](), _0x3fcb56[_0x303b65(0x238)](_0x3fcb56['ARRAY_BUFFER'], quadBuffer), _0x3fcb56[_0x303b65(0x21d)](_0x3fcb56[_0x303b65(0x253)], flatten(_0x267a84), _0x3fcb56[_0x303b65(0x225)]); } function _0x1cc8d5(_0x2e7a31, _0x2937bb, _0xa2fb3a) { const _0xc3ef73 = _0x461d5e, _0x35e9fd = []; for (let _0x259c41 = 0x0; _0x259c41 < _0x2e7a31; ++_0x259c41) { const _0x594c6e = -SPACE_WIDTH + Math[_0xc3ef73(0x252)]() * (0x2 * SPACE_WIDTH), _0x318808 = -_0x34110d + Math['random']() * (0x2 * _0x34110d); _0x35e9fd[_0xc3ef73(0x201)](_0x594c6e), _0x35e9fd['push'](_0x318808), _0x35e9fd['push'](0x0); const _0x125d04 = _0x2937bb + Math[_0xc3ef73(0x252)]() * (_0xa2fb3a - _0x2937bb); _0x35e9fd[_0xc3ef73(0x201)](_0x125d04), _0x35e9fd['push'](0x0), _0x35e9fd[_0xc3ef73(0x201)](0x0); } inParticlesBuffer = _0x3fcb56['createBuffer'](), outParticlesBuffer = _0x3fcb56[_0xc3ef73(0x212)](), _0x3fcb56[_0xc3ef73(0x238)](_0x3fcb56[_0xc3ef73(0x253)], inParticlesBuffer), _0x3fcb56['bufferData'](_0x3fcb56[_0xc3ef73(0x253)], flatten(_0x35e9fd), _0x3fcb56['STREAM_DRAW']), _0x3fcb56[_0xc3ef73(0x238)](_0x3fcb56[_0xc3ef73(0x253)], outParticlesBuffer), _0x3fcb56[_0xc3ef73(0x21d)](_0x3fcb56[_0xc3ef73(0x253)], flatten(_0x35e9fd), _0x3fcb56[_0xc3ef73(0x22e)]); } function _0xec1b50(_0x2c27e3) { const _0x585f03 = _0x461d5e; let _0x21a83d = 0x0; paramsPS[_0x585f03(0x202)] === undefined ? (paramsPS[_0x585f03(0x202)] = _0x2c27e3 / 0x3e8, paramsPS[_0x585f03(0x207)] = 0x0) : (paramsPS['deltaTime'] = _0x2c27e3 / 0x3e8 - paramsPS[_0x585f03(0x202)], paramsPS[_0x585f03(0x202)] = _0x2c27e3 / 0x3e8); window['requestAnimationFrame'](_0xec1b50), _0x3fcb56[_0x585f03(0x1fd)](_0x3fcb56[_0x585f03(0x233)] | _0x3fcb56['DEPTH_BUFFER_BIT']); if (drawField) _0x2b1642(); _0x5f4187(paramsPS[_0x585f03(0x207)]); if (drawPoints) _0x1a39d0(outParticlesBuffer); _0x1ab0ab(); } function _0x5f4187(_0x269b09) { const _0xb1cf0e = _0x461d5e, _0x4a39d7 = _0x3fcb56[_0xb1cf0e(0x1ff)](_0x5ba759, _0xb1cf0e(0x243)), _0x2cf405 = _0x3fcb56[_0xb1cf0e(0x1ff)](_0x5ba759, _0xb1cf0e(0x23d)), _0x4db5f4 = _0x3fcb56[_0xb1cf0e(0x1ff)](_0x5ba759, 'uMinTheta'), _0x216351 = _0x3fcb56[_0xb1cf0e(0x1ff)](_0x5ba759, 'uMaxTheta'), _0x1fd6fe = _0x3fcb56[_0xb1cf0e(0x1ff)](_0x5ba759, _0xb1cf0e(0x23f)), _0x2e46e4 = _0x3fcb56['getUniformLocation'](_0x5ba759, _0xb1cf0e(0x1f1)), _0x55bbd8 = _0x3fcb56['getUniformLocation'](_0x5ba759, _0xb1cf0e(0x226)), _0x3c54b8 = _0x3fcb56[_0xb1cf0e(0x1ff)](_0x5ba759, _0xb1cf0e(0x231)); _0x3fcb56[_0xb1cf0e(0x1f5)](_0x5ba759), _0x3fcb56[_0xb1cf0e(0x228)](_0x4a39d7, _0x269b09), _0x3fcb56[_0xb1cf0e(0x21b)](_0x2cf405, paramsPS[_0xb1cf0e(0x1e8)]), _0x3fcb56[_0xb1cf0e(0x228)](_0x4db5f4, paramsPS[_0xb1cf0e(0x1eb)] - paramsPS[_0xb1cf0e(0x200)]), _0x3fcb56['uniform1f'](_0x216351, paramsPS['centerAngle'] + paramsPS[_0xb1cf0e(0x200)]), _0x3fcb56[_0xb1cf0e(0x228)](_0x1fd6fe, paramsPS[_0xb1cf0e(0x229)]), _0x3fcb56[_0xb1cf0e(0x228)](_0x2e46e4, paramsPS[_0xb1cf0e(0x1f9)]), _0x3fcb56[_0xb1cf0e(0x228)](_0x55bbd8, paramsPS[_0xb1cf0e(0x209)]), _0x3fcb56[_0xb1cf0e(0x228)](_0x3c54b8, paramsPS['maxLife']); for (let _0x26592e = 0x0; _0x26592e < MAX_BODIES; _0x26592e++) { const _0x48c9fc = _0x3fcb56[_0xb1cf0e(0x1ff)](_0x5ba759, _0xb1cf0e(0x20e) + _0x26592e + ']'), _0x1689c0 = _0x3fcb56['getUniformLocation'](_0x5ba759, 'uRadius[' + _0x26592e + ']'), _0x4993ab = _0x26592e < bodies['position'][_0xb1cf0e(0x22c)] ? bodies[_0xb1cf0e(0x211)][_0x26592e] : [0x0, 0x0], _0x16d51f = _0x26592e < bodies['position'][_0xb1cf0e(0x22c)] ? bodies[_0xb1cf0e(0x24e)][_0x26592e] : -0x1; _0x3fcb56[_0xb1cf0e(0x21b)](_0x48c9fc, _0x4993ab), _0x3fcb56[_0xb1cf0e(0x228)](_0x1689c0, _0x16d51f); } const _0x4a8fd4 = _0x3fcb56[_0xb1cf0e(0x248)](_0x5ba759, _0xb1cf0e(0x1e9)), _0x12b36e = _0x3fcb56['getAttribLocation'](_0x5ba759, _0xb1cf0e(0x250)), _0x324bb5 = _0x3fcb56[_0xb1cf0e(0x248)](_0x5ba759, _0xb1cf0e(0x241)), _0x445f34 = _0x3fcb56[_0xb1cf0e(0x248)](_0x5ba759, _0xb1cf0e(0x221)); _0x3fcb56[_0xb1cf0e(0x238)](_0x3fcb56[_0xb1cf0e(0x253)], inParticlesBuffer), _0x3fcb56[_0xb1cf0e(0x1fc)](_0x4a8fd4, 0x2, _0x3fcb56[_0xb1cf0e(0x1fb)], ![], 0x18, 0x0), _0x3fcb56[_0xb1cf0e(0x1fc)](_0x12b36e, 0x1, _0x3fcb56[_0xb1cf0e(0x1fb)], ![], 0x18, 0x8), _0x3fcb56['vertexAttribPointer'](_0x324bb5, 0x1, _0x3fcb56[_0xb1cf0e(0x1fb)], ![], 0x18, 0xc), _0x3fcb56[_0xb1cf0e(0x1fc)](_0x445f34, 0x2, _0x3fcb56[_0xb1cf0e(0x1fb)], ![], 0x18, 0x10), _0x3fcb56[_0xb1cf0e(0x1f8)](_0x4a8fd4), _0x3fcb56[_0xb1cf0e(0x1f8)](_0x12b36e), _0x3fcb56[_0xb1cf0e(0x1f8)](_0x324bb5), _0x3fcb56[_0xb1cf0e(0x1f8)](_0x445f34), _0x3fcb56[_0xb1cf0e(0x206)](_0x3fcb56['TRANSFORM_FEEDBACK_BUFFER'], 0x0, outParticlesBuffer), _0x3fcb56[_0xb1cf0e(0x21f)](_0x3fcb56['RASTERIZER_DISCARD']), _0x3fcb56['beginTransformFeedback'](_0x3fcb56[_0xb1cf0e(0x210)]), _0x3fcb56[_0xb1cf0e(0x20a)](_0x3fcb56[_0xb1cf0e(0x210)], 0x0, N_PARTICLES), _0x3fcb56[_0xb1cf0e(0x245)](), _0x3fcb56[_0xb1cf0e(0x22b)](_0x3fcb56['RASTERIZER_DISCARD']), _0x3fcb56[_0xb1cf0e(0x206)](_0x3fcb56[_0xb1cf0e(0x1f4)], 0x0, null); } function _0x1ab0ab() { let _0xee7460 = inParticlesBuffer; inParticlesBuffer = outParticlesBuffer, outParticlesBuffer = _0xee7460; } function _0x2b1642() { const _0x4df569 = _0x461d5e; _0x3fcb56[_0x4df569(0x1f5)](_0x2602ea); const _0x5f4a96 = _0x3fcb56[_0x4df569(0x1ff)](_0x2602ea, _0x4df569(0x217)); _0x3fcb56[_0x4df569(0x1f0)](_0x5f4a96, SPACE_WIDTH, _0x34110d); for (let _0x1bb6b7 = 0x0; _0x1bb6b7 < MAX_BODIES; _0x1bb6b7++) { const _0x5a9277 = _0x3fcb56[_0x4df569(0x1ff)](_0x2602ea, _0x4df569(0x20e) + _0x1bb6b7 + ']'), _0x35e52f = _0x3fcb56['getUniformLocation'](_0x2602ea, _0x4df569(0x1f7) + _0x1bb6b7 + ']'), _0x5c5b77 = _0x1bb6b7 < bodies[_0x4df569(0x211)]['length'] ? bodies['position'][_0x1bb6b7] : [0x0, 0x0], _0x4c90f5 = _0x1bb6b7 < bodies[_0x4df569(0x211)]['length'] ? bodies[_0x4df569(0x24e)][_0x1bb6b7] : 0x0; _0x3fcb56[_0x4df569(0x21b)](_0x5a9277, _0x5c5b77), _0x3fcb56[_0x4df569(0x228)](_0x35e52f, _0x4c90f5); } const _0x206610 = _0x3fcb56[_0x4df569(0x248)](_0x2602ea, _0x4df569(0x1e9)); _0x3fcb56['bindBuffer'](_0x3fcb56[_0x4df569(0x253)], quadBuffer), _0x3fcb56[_0x4df569(0x1f8)](_0x206610), _0x3fcb56[_0x4df569(0x1fc)](_0x206610, 0x2, _0x3fcb56[_0x4df569(0x1fb)], ![], 0x0, 0x0), _0x3fcb56[_0x4df569(0x20a)](_0x3fcb56[_0x4df569(0x23b)], 0x0, 0x6); } function _0x1a39d0(_0x1f1142) { const _0x5d75d9 = _0x461d5e; _0x3fcb56[_0x5d75d9(0x1f5)](_0x2c144b); const _0x34e353 = _0x3fcb56[_0x5d75d9(0x1ff)](_0x2c144b, 'uSpaceSize'); _0x3fcb56[_0x5d75d9(0x1f0)](_0x34e353, SPACE_WIDTH, _0x34110d); const _0xcae9f = _0x3fcb56[_0x5d75d9(0x248)](_0x2c144b, _0x5d75d9(0x1e9)), _0x37b63e = _0x3fcb56[_0x5d75d9(0x248)](_0x2c144b, _0x5d75d9(0x250)), _0x5d54ba = _0x3fcb56[_0x5d75d9(0x248)](_0x2c144b, 'vLife'); _0x3fcb56[_0x5d75d9(0x238)](_0x3fcb56[_0x5d75d9(0x253)], _0x1f1142), _0x3fcb56[_0x5d75d9(0x1f8)](_0xcae9f), _0x3fcb56[_0x5d75d9(0x1f8)](_0x37b63e), _0x3fcb56[_0x5d75d9(0x1f8)](_0x5d54ba), _0x3fcb56[_0x5d75d9(0x1fc)](_0xcae9f, 0x2, _0x3fcb56['FLOAT'], ![], 0x18, 0x0), _0x3fcb56[_0x5d75d9(0x1fc)](_0x37b63e, 0x1, _0x3fcb56['FLOAT'], ![], 0x18, 0x8), _0x3fcb56[_0x5d75d9(0x1fc)](_0x5d54ba, 0x1, _0x3fcb56[_0x5d75d9(0x1fb)], ![], 0x18, 0xc), _0x3fcb56[_0x5d75d9(0x20a)](_0x3fcb56[_0x5d75d9(0x210)], 0x0, N_PARTICLES); } function _0x4eec94() { const _0x2ca56d = _0x461d5e; console[_0x2ca56d(0x1ed)](paramsPS); } } loadShadersFromURLS([a0_0x3946f4(0x22d), a0_0x3946f4(0x236), 'particle-update.vert', a0_0x3946f4(0x246), a0_0x3946f4(0x23c), a0_0x3946f4(0x218)])['then'](_0x38eaf8 => main(_0x38eaf8));